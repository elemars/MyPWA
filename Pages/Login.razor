@page "/login"
@* @using System.Text.Json *@
@using MyPWA.Shared
@using System.Net.Http.Headers;
@using System.Diagnostics;
@using Newtonsoft.Json;

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject User User
@inject AuthenticationService authService
@inject NavigationManager NavigationManager

<h3>Login</h3>
<br>
<p>@meldung</p>
<br>
@if (authService.IsLoggedIn)
{
    <button type="submit" @onclick="Logout">Logout</button>
}
else
{
    <InputText id="username" @bind-Value="User.Username" placeholder="Username" required autocomplete="current-username" />
    <InputText id="password" @bind-Value="User.Password" type="password" placeholder="Password" required autocomplete="current-password" />

    <button type="submit" @onclick="HandleValidSubmit">Login</button>
}


@code {
    private string meldung = "   ";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        authService.IsLoggedIn = await CheckLoginStatus();
    }

    private async Task<bool> CheckLoginStatus()
    {
        return await JSRuntime.InvokeAsync<bool>("checkLoginStatus");
    }

    private async Task HandleValidSubmit()
    {
        bool? result = false;
        var response = await Http.PostAsJsonAsync("api/Account/login", User);
        if (response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();
            var responseJson = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseString);
            var jwtBearer = responseJson["token"];
            //var result = JsonConvert.DeserializeObject<LoginResult>(responseString);
            //var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (!string.IsNullOrEmpty(jwtBearer))
            {
                // var responseString = await response.Content.ReadAsStringAsync();
                // var responseJson = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseString);
                // var jwtBearer = responseJson["token"];

                // Test API call
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtBearer);
                var testResponse = await Http.GetAsync("api/Account/test");
                Console.WriteLine($"Loginresult: {testResponse.Content}");
                if (testResponse.IsSuccessStatusCode)
                {
                    var testResult = await testResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Test API call result: {testResult}");

                    result = await JSRuntime.InvokeAsync<bool?>("storeToken", jwtBearer);
                    //result = JsonConvert.DeserializeObject<bool>(jsonResponse);
                    if (result == true) result = await authService.LogIn();
                }
                else
                {
                    throw new Exception("Test API call failed");
                }
            }
            else
            {
                Debug.WriteLine($"Login failed: Token is null or empty");
            }
        }
        else
        {
            throw new Exception("Login request failed");
        }
        if (result == true)
        {
            meldung = "Login erfolgreich!";
        }
        else
        {
            meldung = "Login fehlgeschlagen";
        }
    }

    private async Task Logout()
    {
        //cookie löschen
        var result = await authService.LogOut();
        if (result == true)
        {
            meldung = "Logout erfolgreich!";
        }
        else
        {
            meldung = "Logout fehlgeschlagen";
        }
    }

    /*

    @using System.Text.Json
    @using BlazorExample.Shared
    @inject HttpClient Http

    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="username" @bind-Value="User.Username" placeholder="Username" />
    <InputText id="password" @bind-Value="User.Password" type="password" placeholder="Password" />

    <button type="submit">Login</button>
    </EditForm>

    @code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleValidSubmit()
        {
        var response = await Http.PostAsJsonAsync("api/account/login", loginModel);
        if (response.IsSuccessStatusCode)
            {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (result.success)
                {
                // Store JWT token for future API calls
                var jwtBearer = result.jwtBearer;

                // Test API call
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtBearer);
                var testResponse = await Http.GetAsync("api/test");
                if (testResponse.IsSuccessStatusCode)
                    {
                    var testResult = await testResponse.Content.ReadAsStringAsync();
                    Console.WriteLine($"Test API call result: {testResult}");
                }
                    else
                    {
                    throw new Exception("Test API call failed");
            }
            }
                else
                {
                Console.WriteLine($"Login failed: {result.message}");
        }
        }
            else
            {
            throw new Exception("Login request failed");
    }
    }
    }

    *

      */
      /*
      * // AuthModel.cs
      using System.ComponentModel.DataAnnotations;

      namespace BlazorExample.Shared
      {
      public class LoginResult
          {
          public string message { get; set; }
          public string email { get; set; }
          public string jwtBearer { get; set; }
          public bool success { get; set; }
      }

      public class LoginModel
          {
          [Required(ErrorMessage = "Email is required.")]
          [EmailAddress(ErrorMessage = "Email address is not valid.")]
          public string email { get; set; } // NOTE: email will be the username, too

          [Required(ErrorMessage = "Password is required.")]
          [DataType(DataType.Password)]
          public string password { get; set; }
      }

      public class RegModel : LoginModel
          {
          [Required(ErrorMessage = "Confirm password is required.")]
          [DataType(DataType.Password)]
          [Compare("password", ErrorMessage = "Password and confirm password do not match.")]
          public string confirmpwd { get; set; }
     }
          }

    */
}
